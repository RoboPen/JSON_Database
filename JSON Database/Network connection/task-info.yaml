type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String CORRECT_SERVER_OUTPUT =
            "Server started!\n" +
                "Received: Give me a record # N\n" +
                "Sent: A record # N was sent!";

        private static final String CORRECT_CLIENT_OUTPUT =
            "Client started!\n" +
                "Sent: Give me a record # N\n" +
                "Received: A record # N was sent!";

        @DynamicTest(order = 1)
        CheckResult test() {

            TestedProgram server = new TestedProgram("server");
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            String serverOutput = server.getOutput().trim();

            if (!serverOutput.trim().equals("Server started!")) {
                return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
            }

            TestedProgram client = new TestedProgram("client");

            String clientOutput = client.start();
            serverOutput += "\n" + server.getOutput();

            String[] serverOutputLines = serverOutput.split("\n");

            if (serverOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
            }

            String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];

            if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Server output after client connects to the server should be:\n"
                    + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
            }

            String[] clientOutputLines = clientOutput.split("\n");

            if (clientOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
            }

            String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];

            if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Client output after client connects to the server should be:\n"
                    + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/server/Database.java
  visible: true
  text: |
    package server;

    import java.security.InvalidParameterException;
    import java.util.*;

    public class Database {
        private final int initialCapacity = 100;
        private final String[] array = new String[initialCapacity];

        public Database() {
            Arrays.fill(array, "");
        }

        public String get(int numberCell) {
            if (this.array[numberCell - 1].isEmpty())
                throw new InvalidParameterException();
            return this.array[numberCell - 1];
        }

        public void set(int numberCell, String text) {
            this.array[numberCell - 1] = text;
        }

        public void delete(int numberCell) {
            this.array[numberCell - 1] =  "";
        }
    }
  learner_created: true
- name: src/server/Menu.java
  visible: true
  text: |
    package server;

    import java.security.InvalidParameterException;
    import java.util.Arrays;
    import java.util.Scanner;

    public class Menu {
        private final Scanner scanner = new Scanner(System.in);
        private final Database database = new Database();
        public void start() {
            while (true) {
                String input = this.scanner.nextLine();
                if(input.equals("exit")){
                    return;
                }
                String[] split = input.split(" ");
                String command = split[0].toLowerCase();
                int numberCell;

                switch (command) {
                    case "get":
                        try {
                            numberCell = Integer.parseInt(split[1]);
                            System.out.println(database.get(numberCell));
                        } catch (IndexOutOfBoundsException | InvalidParameterException exception) {
                            System.out.println("ERROR");
                        }
                        break;
                    case "set":
                        try {
                            numberCell = Integer.parseInt(split[1]);
                            String[] textArray = Arrays.copyOfRange(split, 2, split.length);
                            String text = String.join(" ", textArray);
                            database.set(numberCell, text);
                            System.out.println("OK");
                        } catch (IndexOutOfBoundsException exception) {
                            System.out.println("ERROR");
                        }
                        break;
                    case "delete":
                        try {
                            numberCell = Integer.parseInt(split[1]);
                            database.delete(numberCell);
                            System.out.println("OK");
                        } catch (IndexOutOfBoundsException exception) {
                            System.out.println("ERROR");
                        }
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5491#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 21 Jun 2022 12:27:04 UTC
record: 2
